=JRuby OSGi

Prototype JRuby support in OSGi.
Extends the jruby.embed APIs: http://kenai.com/projects/jruby-embed/pages/Home
Access classes, ruby and libraries contained in OSGi bundles.

Example: use EclipseRT Web Starter Kit to run some ruby servlets and access some java objects.

== Generated p2 repository
A p2-repository is a way to publish artifacts.
It supports the provisioning of products (p2-director) and compilation environments (maven-tycho).
It is developped at eclipse. 

The repository generated by this project contains org.jruby.jruby, org.jruby.jruby.source,
org.jruby.osg and org.jruby.osgi.source
It is published here:
http://www.intalio.org/public/p2repo/org/jruby/

The jruby sources bundle was assembled manually. It is currently uploaded here:
http://www.intalio.org/public/maven2/org/jruby/jruby/1.5.3/
The org.jruby.jruby bundle is jruby-complete downloaded from maven central; unchanged.

In particular: no DynamicImport-Package in this MANIFEST.MF

== OSGiScriptingContainer extends ScriptingContainer
Java code in an osgi bundle:
  OSGiScriptingContainer container = new OSGiScriptingContainer();
  container.runScriptlet(bundle, "/ruby/extend_MyClass.rb")

The bundle is lazily added to JRuby's ClassPath.

where 'extend_MyClass.rb' reads:
  class Java::OrgJrubyOsgiTestSample::MyClass
    def say_hello
      puts "hello"
    end
  end

It is also possible to add OSGi bundles to JRuby's ClassPath from java:
  container.addToClassPath(bundle)


== require 'bundle:/bundle.symbolic.name'
Define ruby libraries contained in an osgi bundle:
  require 'osgibundle:/org.jruby.osgi.test.samplebundle'
  class Java::OrgJrubyOsgiTestSamplebundle::MyOtherClass
    def say_hello_as_well
      puts "hello_as_well"
    end
  end

Access a ruby file inside a bundle:
  require 'osgibundle:/org.jruby.osgi.test/ruby/extend_MyClass.rb'

== How-to build:
maven-3:
  mvn clean integration-test

== License and copyright:
The same than the jruby code.
